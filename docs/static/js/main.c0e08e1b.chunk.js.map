{"version":3,"sources":["components/Setup.js","components/MultiChoice.js","components/TrueFalse.js","components/ErrorPage.js","components/QuestionBoard.js","components/ScoreBoard.js","components/Loading.js","views/App.js","reportWebVitals.js","index.js"],"names":["Setup","props","useState","error","setError","className","onSubmit","e","preventDefault","setState","STATE","LOADING_QUESTIONS","htmlFor","min","max","type","id","value","params","number","onChange","input","target","parseInt","setParams","category","difficulty","MultiChoice","question","answers","submitted","setCurrentAnswer","currentAnswer","map","answer","index","disabled","aria-disabled","name","checked","onFocus","onClick","correct_answer","parseEntities","TrueFalse","ErrorPage","state","LOADING_FAIL","SETUP","txt","DOMParser","parseFromString","body","innerText","QuestionBoard","questions","score","updateScorePercentage","questionIndex","setQuestionIndex","setSubmitted","answerList","updateAnswerList","ref","useRef","useEffect","temp","incorrect_answers","i","length","j","Math","floor","random","k","current","focus","handleOnSubmit","FINISHED","action","LOADING_SUCCESS","ScoreBoard","aced","autoFocus","Loading","role","requestQuestions","a","completeUrl","url","fetch","response","json","questionData","App","setQuestions","updateScore","then","data","catch","console","log","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0e08e1b.chunk.js","sourcesContent":["import { STATE } from \"../views/App\";\nimport { useState } from \"react\";\nconst Setup = (props) => {\n  const [error, setError] = useState(\"\");\n  const validateInput = (input) => {\n    if ((parseInt(input) > 0 && parseInt(input) < 101) || input === \"\") {\n      error && setError(\"\");\n      props.setParams({ ...props.params, number: input });\n    }\n  };\n  return (\n    <div className=\"m-4\">\n      <div className=\"row text-center mb-4\">\n        <h2 className=\"quiz-blue\">Choose your settings:</h2>\n      </div>\n      <form\n        onSubmit={(e) => \n            {e.preventDefault()\n             props.setState(STATE.LOADING_QUESTIONS)}}\n      >\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12 col-sm-4 col-md-3\">\n            <label htmlFor=\"number\">\n              <small>Number of Questions</small>\n            </label>\n            <input\n              min=\"1\"\n              max=\"100\"\n              type=\"number\"\n              className=\"form-control\"\n              id=\"number\"\n              value={props.params.number}\n              onChange={(e) => validateInput(e.target.value)}\n            />\n          </div>\n          <div className=\"col-12 col-sm-4\">\n            <label htmlFor=\"question-type\">\n              <small>Category</small>\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"question-type\"\n              value={props.params.category}\n              onChange={(e) =>\n                props.setParams({ ...props.params, category: e.target.value })\n              }\n            >\n              <option value=\"any\">Any Category</option>\n              <option value=\"9\">General Knowledge</option>\n              <option value=\"10\">Entertainment: Books</option>\n              <option value=\"11\">Entertainment: Film</option>\n              <option value=\"12\">Entertainment: Music</option>\n              <option value=\"13\">Entertainment: Musicals & Theatres</option>\n              <option value=\"14\">Entertainment: Television</option>\n              <option value=\"15\">Entertainment: Video Games</option>\n              <option value=\"16\">Entertainment: Board Games</option>\n              <option value=\"17\">Science & Nature</option>\n              <option value=\"18\">Science Computers</option>\n              <option value=\"19\">Science: Mathematics</option>\n              <option value=\"20\">Mythology</option>\n              <option value=\"21\">Sports</option>\n              <option value=\"22\">Geography</option>\n              <option value=\"23\">History</option>\n              <option value=\"24\">Politics</option>\n              <option value=\"25\">Art</option>\n              <option value=\"26\">Celebrities</option>\n              <option value=\"27\">Animals</option>\n              <option value=\"28\">Vehicles</option>\n              <option value=\"29\">Entertainment: Comics</option>\n              <option value=\"30\">Science: Gadgets</option>\n              <option value=\"31\">Entertainment: Japanese Anime & Manga</option>\n              <option value=\"32\">Entertainment: Cartoon & Animations</option>\n            </select>\n          </div>\n          <div className=\"col-12 col-md-3 col-sm-4\">\n            <label htmlFor=\"question-difficulty\">\n              <small>Difficulty </small>\n            </label>\n            <select\n              className=\"form-select\"\n              id=\"question-difficulty\"\n              value={props.params.difficulty}\n              onChange={(e) =>\n                props.setParams({ ...props.params, difficulty: e.target.value })\n              }\n            >\n              <option value=\"any\">Any Difficulty</option>\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n          <div className=\"col-12 col-sm-4 mt-5 d-flex justify-content-center\">\n            <button type=\"submit\" className=\"btn btn-quiz px-3 px-md-5 \">\n              Start Game\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Setup;\n","import { parseEntities } from \"./QuestionBoard\";\n\nconst MultiChoice = ({\n  question,\n  answers,\n  submitted,\n  setCurrentAnswer,\n  currentAnswer,\n}) => {\n  return answers.map((answer, index) => (\n    <div className=\"my-2 row justify-content-center\" key={index}>\n      <div className=\"radio-toolbar col-12 col-sm-8 col-md-6 row lead fs-4 \">\n        <input\n          disabled={submitted}\n          aria-disabled={submitted}\n          type=\"radio\"\n          name=\"mc\"\n          id={answer}\n          value={answer}\n          checked={currentAnswer === answer}\n          onFocus={(e) => setCurrentAnswer(e.target.value)}\n          //for safari\n          onClick={(e) => setCurrentAnswer(e.target.value)}\n          onChange={() => {}}\n        />\n        <label\n          htmlFor={answer}\n          className={\n            \"lead fs-4 text-center  \" +\n            (submitted && answer === question.correct_answer\n              ? \"bg-success text-light\"\n              : submitted && answer !== question.correct_answer\n              ? \"half-opacity text-dark\"\n              : \"\")\n          }\n        >\n          {parseEntities(answer)}\n        </label>\n      </div>\n    </div>\n  ));\n};\nexport default MultiChoice;\n","const TrueFalse = ({\n  question,\n  index,\n  submitted,\n  currentAnswer,\n  setCurrentAnswer,\n}) => {\n  return (\n    <>\n      <div className=\"my-2 row justify-content-center\">\n        <div className=\"radio-toolbar text-center lead fs-4 col-12 col-sm-8 col-md-6 row \">\n          <input\n            type=\"radio\"\n            disabled={submitted}\n            aria-disabled={submitted}\n            name=\"tf\"\n            id={\"true\" + index}\n            value=\"True\"\n            checked={currentAnswer === \"True\"}\n            onFocus={(e) => setCurrentAnswer(e.target.value)}\n            //for safari\n            onClick={(e) => setCurrentAnswer(e.target.value)}\n            onChange={() => {}}\n          />\n          <label\n            htmlFor={\"true\" + index}\n            className={\n              submitted && \"True\" === question.correct_answer\n                ? \"bg-success text-light\"\n                : submitted && \"True\" !== question.correct_answer\n                ? \"half-opacity text-dark\"\n                : \"\"\n            }\n          >\n            True\n          </label>\n        </div>\n      </div>\n      <div className=\"row radio-toolbar justify-content-center my-3\">\n        <div className=\"text-center lead fs-4 col-12 col-sm-8 col-md-6 row\">\n          <input\n            type=\"radio\"\n            disabled={submitted}\n            aria-disabled={submitted}\n            name=\"tf\"\n            id={\"false\" + index}\n            value=\"False\"\n            checked={currentAnswer === \"False\"}\n            onFocus={(e) => setCurrentAnswer(e.target.value)}\n            onChange={() => {}}\n          />\n          <label\n            htmlFor={\"false\" + index}\n            className={\n              submitted && \"False\" === question.correct_answer\n                ? \"bg-success text-light\"\n                : submitted && \"False\" !== question.correct_answer\n                ? \"half-opacity text-dark\"\n                : \"\"\n            }\n          >\n            False\n          </label>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TrueFalse;\n","import { STATE } from \"../views/App\";\nconst ErrorPage = ({ state, setState }) => {\n  return (\n    <div className=\"text-center mt-5 mx-3 lead\">\n      {state === STATE.LOADING_FAIL ? (\n        <p>Something went wrong, please try again.</p>\n      ) : (\n        <p>\n          We could not set up a trivia session with your requested criteria.\n          Please try again with a different category, difficulty level, and/or\n          number of questions.\n        </p>\n      )}\n      <button\n        onClick={() => setState(STATE.SETUP)}\n        className=\"mt-4 btn btn-quiz\"\n      >\n        Return to Setup\n      </button>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import { useState, useEffect, useRef } from \"react\";\nimport { STATE } from \"../views/App\";\nimport MultiChoice from \"./MultiChoice\";\nimport TrueFalse from \"./TrueFalse\";\nimport ErrorPage from \"./ErrorPage\";\n\nexport const parseEntities = (txt) =>\n  new DOMParser().parseFromString(txt, \"text/html\").body.innerText;\n\nconst QuestionBoard = ({\n  questions,\n  setState,\n  score,\n  updateScorePercentage,\n}) => {\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [answerList, updateAnswerList] = useState([]);\n  const ref = useRef();\n  const handleNext = () =>\n    questionIndex === questions.length - 1\n      ? setState(STATE.FINISHED)\n      : (setSubmitted(false),\n        setCurrentAnswer(\"\"),\n        setQuestionIndex(questionIndex + 1));\n  const question = questions ? questions[questionIndex] : \"\";\n  useEffect(() => {\n    if (questions) {\n      if (submitted === false) {\n        let temp = [...question.incorrect_answers, question.correct_answer];\n        //fisher yates method of shuffling --\n        //https://stackoverflow.com/questions/64925666/how-can-i-sort-an-array-randomly-in-javascript\n        for (let i = temp.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * i);\n          let k = temp[i];\n          temp[i] = temp[j];\n          temp[j] = k;\n        }\n        updateAnswerList(\n          temp,\n          question.incorrect_answers,\n          question.correct_answer\n        );\n      } else {\n        ref.current.focus();\n      }\n    }\n  }, [\n    submitted,\n    question.incorrect_answers,\n    question.correct_answer,\n    questions,\n  ]);\n  const handleSubmit = () => {\n    setSubmitted(true);\n    if (currentAnswer === question.correct_answer) {\n      updateScorePercentage(score + 1);\n    }\n  };\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    submitted ? handleNext() : handleSubmit();\n  };\n  return !questions.length ? (\n    <ErrorPage state={STATE.LOADING_SUCCESS} setState={setState} />\n  ) : (\n    <div className=\"row mx-4 mt-2 justify-content-center\">\n      <div className=\"row justify-content-between\">\n        <div\n          className={\n            \"col-sm-auto ms-md-5 my-2 py-2 text-center rounded-pill \" +\n            (question.difficulty === \"medium\"\n              ? \"bg-warning\"\n              : question.difficulty === \"easy\"\n              ? \"bg-success\"\n              : \"bg-danger\")\n          }\n        >\n          Difficulty: {question.difficulty}\n        </div>\n        <div className=\"col-sm-auto me-md-5 my-2 py-2 text-center rounded-pill text-light bg-quiz-blue\">\n          Category: {question.category}\n        </div>\n      </div>\n      <div className=\"row text-center mb-4 mt-3\">\n        <p className=\"lead fs-2\">{parseEntities(question.question)}</p>\n      </div>\n      <form action=\"#\" onSubmit={(e) => handleOnSubmit(e)}>\n        {question.type === \"boolean\" ? (\n          <TrueFalse\n            question={question}\n            index={questionIndex}\n            submitted={submitted}\n            currentAnswer={currentAnswer}\n            setCurrentAnswer={setCurrentAnswer}\n          />\n        ) : (\n          <MultiChoice\n            question={question}\n            answers={answerList}\n            submitted={submitted}\n            currentAnswer={currentAnswer}\n            setCurrentAnswer={setCurrentAnswer}\n          />\n        )}\n        <div className=\"mt-4 d-flex justify-content-center\">\n          <button\n            type=\"submit\"\n            ref={ref}\n            className={\"btn \" + (submitted ? \"btn-secondary\" : \"btn-quiz\")}\n            disabled={!currentAnswer}\n            aria-disabled={!currentAnswer}\n          >\n            {submitted\n              ? questionIndex === questions.length - 1\n                ? \"See Score\"\n                : \"Next Question\"\n              : \"Lock Answer\"}\n          </button>\n        </div>\n      </form>\n      <div className=\"mt-4 border col-auto text-center align-middle rounded-pill bg-secondary fw-bold text-light\">\n        {questionIndex + 1}/{questions.length}\n      </div>\n    </div>\n  );\n};\nexport default QuestionBoard;\n","import { STATE } from \"../views/App\";\nconst ScoreBoard = ({ score, number, setState }) => {\n  let aced = score === parseInt(number);\n  return (\n    <>\n      <div className=\"row justify-content-center text-center mt-5\">\n        {aced && (\n          <div className=\"display-3 fw-bold mb-2 quiz-blue\">Congrats!!!</div>\n        )}\n        <h2 className=\"display-3 fw-bold quiz-blue\">\n          <em>You</em> know {parseInt((score / number) * 100)}% of the things.\n        </h2>\n      </div>\n      <div className=\"row justify-content-center text-center mt-3 lead\">\n        {score} out of {number} questions answered correctly.\n      </div>\n      <div className=\"mt-5 d-flex justify-content-center\">\n        <button\n          autoFocus\n          className={\"btn px-3 px-md-5 btn-quiz\"}\n          onClick={() => setState(STATE.SETUP)}\n        >\n          Play Again\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default ScoreBoard;\n","const Loading = () => (\n  <div className=\"loading\">\n    <div className=\"spinner-border spinner-border-xl quiz-blue\" role=\"status\" />\n    <p>Loading Questions...</p>\n  </div>\n);\n\nexport default Loading;\n","import Setup from \"../components/Setup\";\nimport QuestionBoard from \"../components/QuestionBoard\";\nimport ScoreBoard from \"../components/ScoreBoard\";\nimport Loading from \"../components/Loading\";\nimport ErrorPage from \"../components/ErrorPage\";\n\nimport { useState, useEffect } from \"react\";\nexport const STATE = {\n  SETUP: \"setup\",\n  LOADING_QUESTIONS: \"loading questions\",\n  LOADING_FAIL: \"loading fail\",\n  LOADING_SUCCESS: \"play\",\n  FINISHED: \"finish\",\n};\n\nconst requestQuestions = async (number, difficulty, category) => {\n  let response;\n  let completeUrl = url + `amount=${number}`;\n  if (difficulty === \"any\" && category === \"any\") {\n    response = await fetch(completeUrl);\n  } else {\n    if (difficulty !== \"any\") {\n      completeUrl += `&difficulty=${difficulty}`;\n    }\n    if (category !== \"any\") {\n      completeUrl += `&category=${category}`;\n    }\n\n    response = await fetch(completeUrl);\n  }\n  let questionData = await response.json();\n  return questionData;\n};\nconst url = \"https://opentdb.com/api.php?\";\n\nconst App = () => {\n  const [state, setState] = useState(STATE.SETUP);\n  const [questions, setQuestions] = useState(null);\n  const [params, setParams] = useState({\n    number: \"3\",\n    difficulty: \"any\",\n    category: \"any\",\n  });\n  const [score, updateScore] = useState(0);\n  useEffect(() => {\n    if (state === STATE.LOADING_QUESTIONS) {\n      requestQuestions(params.number, params.difficulty, params.category)\n        .then((data) => {\n          setQuestions(data);\n        })\n        .catch((error) => {\n          setState(STATE.LOADING_FAIL);\n          console.log(error);\n        });\n    }\n  }, [state, params.number, params.difficulty, params.category]);\n  useEffect(() => {\n    if (state === STATE.SETUP) {\n      setParams({\n        number: \"3\",\n        difficulty: \"any\",\n        category: \"any\",\n      });\n      setQuestions(null);\n      updateScore(0);\n    }\n  }, [state]);\n  useEffect(() => {\n    if (state === STATE.LOADING_QUESTIONS && questions) {\n      setState(STATE.LOADING_SUCCESS);\n    }\n  }, [questions, state]);\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row text-center bg-quiz-blue\">\n        <h1 className=\"display-2 fw-bold text-light\">\n          What Do <em>YOU</em> Know?!\n        </h1>\n      </div>\n\n      {state === STATE.SETUP ? (\n        <Setup setParams={setParams} params={params} setState={setState} />\n      ) : state === STATE.LOADING_QUESTIONS ? (\n        <Loading />\n      ) : state === STATE.LOADING_SUCCESS ? (\n        <QuestionBoard\n          questions={questions.results}\n          setState={setState}\n          score={score}\n          updateScorePercentage={updateScore}\n        />\n      ) : STATE.FINISHED ? (\n        <ScoreBoard score={score} number={params.number} setState={setState} />\n      ) : (\n        <ErrorPage state={state} setState={setState} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}